//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZohoCRM.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MS_DEVEntities : DbContext
    {
        public MS_DEVEntities()
            : base("name=MS_DEVEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AAContractInvestment> AAContractInvestments { get; set; }
        public virtual DbSet<AAContract> AAContracts { get; set; }
        public virtual DbSet<AAIncompleteSignUpEmail> AAIncompleteSignUpEmails { get; set; }
        public virtual DbSet<AAInsufficientFund> AAInsufficientFunds { get; set; }
        public virtual DbSet<AAPlusCost> AAPlusCosts { get; set; }
        public virtual DbSet<AAPreAllocate> AAPreAllocates { get; set; }
        public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public virtual DbSet<aspnet_Profile> aspnet_Profile { get; set; }
        public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
        public virtual DbSet<aspnet_UsersInRoles> aspnet_UsersInRoles { get; set; }
        public virtual DbSet<b_UOBGroupBranches> b_UOBGroupBranches { get; set; }
        public virtual DbSet<BrwInitialNoteRequest> BrwInitialNoteRequests { get; set; }
        public virtual DbSet<CampaignEmailAlert> CampaignEmailAlerts { get; set; }
        public virtual DbSet<DropdownList> DropdownLists { get; set; }
        public virtual DbSet<DropdownListCategory> DropdownListCategories { get; set; }
        public virtual DbSet<EmailScheduler> EmailSchedulers { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<FundTransferInSlip> FundTransferInSlips { get; set; }
        public virtual DbSet<InvestorLateInterest> InvestorLateInterests { get; set; }
        public virtual DbSet<InvestorRepayment> InvestorRepayments { get; set; }
        public virtual DbSet<InvestorRepaymentPayment> InvestorRepaymentPayments { get; set; }
        public virtual DbSet<IssuerLateInterest> IssuerLateInterests { get; set; }
        public virtual DbSet<IssuerRepayment> IssuerRepayments { get; set; }
        public virtual DbSet<IssuerRepaymentPayment> IssuerRepaymentPayments { get; set; }
        public virtual DbSet<p_ContractTemplate> p_ContractTemplate { get; set; }
        public virtual DbSet<PublicHoliday> PublicHolidays { get; set; }
        public virtual DbSet<Reward> Rewards { get; set; }
        public virtual DbSet<tbl_AACharging> tbl_AACharging { get; set; }
        public virtual DbSet<tbl_AccInt_ApplicationDetails> tbl_AccInt_ApplicationDetails { get; set; }
        public virtual DbSet<tbl_AccInt_RequestFiles> tbl_AccInt_RequestFiles { get; set; }
        public virtual DbSet<tbl_AccInt_RequestMaster> tbl_AccInt_RequestMaster { get; set; }
        public virtual DbSet<tbl_AccInt_ServiceResponse> tbl_AccInt_ServiceResponse { get; set; }
        public virtual DbSet<tbl_AccInt_TokenStore> tbl_AccInt_TokenStore { get; set; }
        public virtual DbSet<tbl_AccountAdjustment> tbl_AccountAdjustment { get; set; }
        public virtual DbSet<tbl_AccountDetails> tbl_AccountDetails { get; set; }
        public virtual DbSet<tbl_AccountDetialsIgnoreList> tbl_AccountDetialsIgnoreList { get; set; }
        public virtual DbSet<tbl_AdminActionLogs> tbl_AdminActionLogs { get; set; }
        public virtual DbSet<tbl_API_ACRA_COMPANY_REGN_DATA> tbl_API_ACRA_COMPANY_REGN_DATA { get; set; }
        public virtual DbSet<tbl_API_Auditors> tbl_API_Auditors { get; set; }
        public virtual DbSet<tbl_API_Bankruptcy> tbl_API_Bankruptcy { get; set; }
        public virtual DbSet<tbl_API_BankruptcyFIling> tbl_API_BankruptcyFIling { get; set; }
        public virtual DbSet<tbl_API_BusinessLitigation> tbl_API_BusinessLitigation { get; set; }
        public virtual DbSet<tbl_API_BusinessLitigationFiling> tbl_API_BusinessLitigationFiling { get; set; }
        public virtual DbSet<tbl_API_CapitalStructure> tbl_API_CapitalStructure { get; set; }
        public virtual DbSet<tbl_API_DPRatingMaster> tbl_API_DPRatingMaster { get; set; }
        public virtual DbSet<tbl_API_Filings> tbl_API_Filings { get; set; }
        public virtual DbSet<tbl_API_Guarantor> tbl_API_Guarantor { get; set; }
        public virtual DbSet<tbl_API_IndividualLitigation> tbl_API_IndividualLitigation { get; set; }
        public virtual DbSet<tbl_API_IndividualLitigationFiling> tbl_API_IndividualLitigationFiling { get; set; }
        public virtual DbSet<tbl_API_IssuerRegistration> tbl_API_IssuerRegistration { get; set; }
        public virtual DbSet<tbl_API_Representatives> tbl_API_Representatives { get; set; }
        public virtual DbSet<tbl_API_Scorto_ApplicationInfo> tbl_API_Scorto_ApplicationInfo { get; set; }
        public virtual DbSet<tbl_API_Scorto_Configuration> tbl_API_Scorto_Configuration { get; set; }
        public virtual DbSet<tbl_API_Scorto_CreditInfo> tbl_API_Scorto_CreditInfo { get; set; }
        public virtual DbSet<tbl_API_Scorto_IssuerInfo> tbl_API_Scorto_IssuerInfo { get; set; }
        public virtual DbSet<tbl_API_SearchCount> tbl_API_SearchCount { get; set; }
        public virtual DbSet<tbl_API_Shareholder> tbl_API_Shareholder { get; set; }
        public virtual DbSet<tbl_API_ShareholderDetails> tbl_API_ShareholderDetails { get; set; }
        public virtual DbSet<tbl_API_WritOfSummons> tbl_API_WritOfSummons { get; set; }
        public virtual DbSet<tbl_AuditLog> tbl_AuditLog { get; set; }
        public virtual DbSet<tbl_AuditTrial> tbl_AuditTrial { get; set; }
        public virtual DbSet<tbl_AuditTwoFAVerification> tbl_AuditTwoFAVerification { get; set; }
        public virtual DbSet<tbl_Balances> tbl_Balances { get; set; }
        public virtual DbSet<tbl_BanksList> tbl_BanksList { get; set; }
        public virtual DbSet<tbl_CampaignMinimumAmounts> tbl_CampaignMinimumAmounts { get; set; }
        public virtual DbSet<tbl_CampaignViewers> tbl_CampaignViewers { get; set; }
        public virtual DbSet<tbl_Comments> tbl_Comments { get; set; }
        public virtual DbSet<tbl_Countries> tbl_Countries { get; set; }
        public virtual DbSet<tbl_DPCreditPaymentGrade> tbl_DPCreditPaymentGrade { get; set; }
        public virtual DbSet<tbl_ErrorLog> tbl_ErrorLog { get; set; }
        public virtual DbSet<tbl_ESignInfo> tbl_ESignInfo { get; set; }
        public virtual DbSet<tbl_Files> tbl_Files { get; set; }
        public virtual DbSet<tbl_FundTransferIN_Raw> tbl_FundTransferIN_Raw { get; set; }
        public virtual DbSet<tbl_FundTransferIN_Staging> tbl_FundTransferIN_Staging { get; set; }
        public virtual DbSet<tbl_FundTransferRef> tbl_FundTransferRef { get; set; }
        public virtual DbSet<tbl_GlobalVariables> tbl_GlobalVariables { get; set; }
        public virtual DbSet<tbl_GoToKnowSource> tbl_GoToKnowSource { get; set; }
        public virtual DbSet<tbl_Group> tbl_Group { get; set; }
        public virtual DbSet<tbl_GroupLoanRequests> tbl_GroupLoanRequests { get; set; }
        public virtual DbSet<tbl_GroupProduct> tbl_GroupProduct { get; set; }
        public virtual DbSet<tbl_GroupUsers> tbl_GroupUsers { get; set; }
        public virtual DbSet<tbl_Investor_Announcement_Groups> tbl_Investor_Announcement_Groups { get; set; }
        public virtual DbSet<tbl_Investor_Announcements> tbl_Investor_Announcements { get; set; }
        public virtual DbSet<tbl_InvestorReferees> tbl_InvestorReferees { get; set; }
        public virtual DbSet<tbl_InvestorServicingFee> tbl_InvestorServicingFee { get; set; }
        public virtual DbSet<tbl_InvestorServicingFeeType> tbl_InvestorServicingFeeType { get; set; }
        public virtual DbSet<tbl_InvoiceFinanceProductDetails> tbl_InvoiceFinanceProductDetails { get; set; }
        public virtual DbSet<tbl_Knowledgeassessment_OptionsList> tbl_Knowledgeassessment_OptionsList { get; set; }
        public virtual DbSet<tbl_Knowledgeassessment_Parentlist> tbl_Knowledgeassessment_Parentlist { get; set; }
        public virtual DbSet<tbl_Knowledgeassessmentdetails_ForUser> tbl_Knowledgeassessmentdetails_ForUser { get; set; }
        public virtual DbSet<tbl_LaunchTimes> tbl_LaunchTimes { get; set; }
        public virtual DbSet<tbl_Loanoffers> tbl_Loanoffers { get; set; }
        public virtual DbSet<tbl_LoanOffersLog> tbl_LoanOffersLog { get; set; }
        public virtual DbSet<tbl_LoanPayments> tbl_LoanPayments { get; set; }
        public virtual DbSet<tbl_LoanPurposesList> tbl_LoanPurposesList { get; set; }
        public virtual DbSet<tbl_LoanRateChangeLog> tbl_LoanRateChangeLog { get; set; }
        public virtual DbSet<tbl_loanRequestReference> tbl_loanRequestReference { get; set; }
        public virtual DbSet<tbl_LoanRequests> tbl_LoanRequests { get; set; }
        public virtual DbSet<tbl_LoanRequestServiceFee> tbl_LoanRequestServiceFee { get; set; }
        public virtual DbSet<tbl_LoanTransactions> tbl_LoanTransactions { get; set; }
        public virtual DbSet<tbl_LogOtherLoanDocuments> tbl_LogOtherLoanDocuments { get; set; }
        public virtual DbSet<tbl_MoolahCore> tbl_MoolahCore { get; set; }
        public virtual DbSet<tbl_MoolahCoreVerification> tbl_MoolahCoreVerification { get; set; }
        public virtual DbSet<tbl_MoolahPeri> tbl_MoolahPeri { get; set; }
        public virtual DbSet<tbl_MoolahPeriVerification> tbl_MoolahPeriVerification { get; set; }
        public virtual DbSet<tbl_MoolahPerksForLenders> tbl_MoolahPerksForLenders { get; set; }
        public virtual DbSet<tbl_NatureofBusinessList> tbl_NatureofBusinessList { get; set; }
        public virtual DbSet<tbl_NewMoolahCore> tbl_NewMoolahCore { get; set; }
        public virtual DbSet<tbl_NewMoolahCoreVerification> tbl_NewMoolahCoreVerification { get; set; }
        public virtual DbSet<tbl_OtherLoanDocuments> tbl_OtherLoanDocuments { get; set; }
        public virtual DbSet<tbl_OutStandingLitigation> tbl_OutStandingLitigation { get; set; }
        public virtual DbSet<tbl_PaidLatePayments> tbl_PaidLatePayments { get; set; }
        public virtual DbSet<tbl_Partners> tbl_Partners { get; set; }
        public virtual DbSet<tbl_PersonalGuaranteeInfo> tbl_PersonalGuaranteeInfo { get; set; }
        public virtual DbSet<tbl_PersonalGuranteeVerification> tbl_PersonalGuranteeVerification { get; set; }
        public virtual DbSet<tbl_PointAudit> tbl_PointAudit { get; set; }
        public virtual DbSet<tbl_Product> tbl_Product { get; set; }
        public virtual DbSet<tbl_ReconData> tbl_ReconData { get; set; }
        public virtual DbSet<tbl_ReconSummary> tbl_ReconSummary { get; set; }
        public virtual DbSet<tbl_RepaymentMessages> tbl_RepaymentMessages { get; set; }
        public virtual DbSet<tbl_RepaymentMessagesTemp> tbl_RepaymentMessagesTemp { get; set; }
        public virtual DbSet<tbl_SecurityQuestions> tbl_SecurityQuestions { get; set; }
        public virtual DbSet<tbl_SecurityQuestionsForUsers> tbl_SecurityQuestionsForUsers { get; set; }
        public virtual DbSet<tbl_TenureMSFees> tbl_TenureMSFees { get; set; }
        public virtual DbSet<tbl_TransactionMapping> tbl_TransactionMapping { get; set; }
        public virtual DbSet<tbl_TransactionType> tbl_TransactionType { get; set; }
        public virtual DbSet<tbl_TwoFAVerification> tbl_TwoFAVerification { get; set; }
        public virtual DbSet<tbl_UserGoToKnowSourceDetails> tbl_UserGoToKnowSourceDetails { get; set; }
        public virtual DbSet<tbl_UserPreferences> tbl_UserPreferences { get; set; }
        public virtual DbSet<tbl_Users> tbl_Users { get; set; }
        public virtual DbSet<tbl_UserVerification> tbl_UserVerification { get; set; }
        public virtual DbSet<tbl_WatchList> tbl_WatchList { get; set; }
        public virtual DbSet<tbl_WithDrawAdminNotes> tbl_WithDrawAdminNotes { get; set; }
        public virtual DbSet<tbl_WithDrawMoney> tbl_WithDrawMoney { get; set; }
        public virtual DbSet<u_Permissions> u_Permissions { get; set; }
        public virtual DbSet<u_Points> u_Points { get; set; }
        public virtual DbSet<u_PromotionCampaigns> u_PromotionCampaigns { get; set; }
        public virtual DbSet<u_Referrars> u_Referrars { get; set; }
        public virtual DbSet<u_VerificationToken> u_VerificationToken { get; set; }
        public virtual DbSet<UserAcknowledgement> UserAcknowledgements { get; set; }
        public virtual DbSet<UserEmployment> UserEmployments { get; set; }
        public virtual DbSet<UserEmploymentVerification> UserEmploymentVerifications { get; set; }
        public virtual DbSet<UserQualification> UserQualifications { get; set; }
        public virtual DbSet<UserQualificationVerification> UserQualificationVerifications { get; set; }
        public virtual DbSet<UserRepaymentMsg> UserRepaymentMsgs { get; set; }
        public virtual DbSet<AggregatedCounter> AggregatedCounters { get; set; }
        public virtual DbSet<Counter> Counters { get; set; }
        public virtual DbSet<Hash> Hashes { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobParameter> JobParameters { get; set; }
        public virtual DbSet<JobQueue> JobQueues { get; set; }
        public virtual DbSet<List> Lists { get; set; }
        public virtual DbSet<Schema> Schemata { get; set; }
        public virtual DbSet<Server> Servers { get; set; }
        public virtual DbSet<Set> Sets { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<ActionPermission> ActionPermissions { get; set; }
        public virtual DbSet<PermissionMenu> PermissionMenus { get; set; }
        public virtual DbSet<RolePermissionMenu> RolePermissionMenus { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<UsersRole> UsersRoles { get; set; }
        public virtual DbSet<b_tempUOBGroupBranches> b_tempUOBGroupBranches { get; set; }
        public virtual DbSet<CheckInvestorRepayment> CheckInvestorRepayments { get; set; }
        public virtual DbSet<IndustryType> IndustryTypes { get; set; }
        public virtual DbSet<tbl_AccountDetails1> tbl_AccountDetails1 { get; set; }
        public virtual DbSet<tbl_API_DPOrder> tbl_API_DPOrder { get; set; }
        public virtual DbSet<tbl_AuditRegisterOTPVerification> tbl_AuditRegisterOTPVerification { get; set; }
        public virtual DbSet<tbl_Balances_3> tbl_Balances_3 { get; set; }
        public virtual DbSet<tbl_Balances1> tbl_Balances1 { get; set; }
        public virtual DbSet<tbl_LogESignInfo> tbl_LogESignInfo { get; set; }
        public virtual DbSet<tbl_Product2> tbl_Product2 { get; set; }
        public virtual DbSet<tbl_RegisterOTPVerification> tbl_RegisterOTPVerification { get; set; }
        public virtual DbSet<tbl_RepaymentMessages1> tbl_RepaymentMessages1 { get; set; }
        public virtual DbSet<tbl_RiskAdjustedOfReturn> tbl_RiskAdjustedOfReturn { get; set; }
        public virtual DbSet<tbl_tempBalances> tbl_tempBalances { get; set; }
        public virtual DbSet<tbl_tempLateIssuerRepayment> tbl_tempLateIssuerRepayment { get; set; }
        public virtual DbSet<tbl_tempLoanTransactions> tbl_tempLoanTransactions { get; set; }
        public virtual DbSet<tbl_UserTest> tbl_UserTest { get; set; }
        public virtual DbSet<tempInvestorRepayment> tempInvestorRepayments { get; set; }
        public virtual DbSet<tempScheduledRepayment1> tempScheduledRepayment1 { get; set; }
        public virtual DbSet<u_ReferrarsTest> u_ReferrarsTest { get; set; }
        public virtual DbSet<vw_aspnet_MembershipUsers> vw_aspnet_MembershipUsers { get; set; }
        public virtual DbSet<vw_aspnet_Profiles> vw_aspnet_Profiles { get; set; }
        public virtual DbSet<vw_aspnet_Roles> vw_aspnet_Roles { get; set; }
        public virtual DbSet<vw_aspnet_Users> vw_aspnet_Users { get; set; }
        public virtual DbSet<vw_aspnet_UsersInRoles> vw_aspnet_UsersInRoles { get; set; }
    
        [DbFunction("MS_DEVEntities", "GetActiveDemo")]
        public virtual IQueryable<GetActiveDemo_Result> GetActiveDemo(Nullable<int> fromAge, Nullable<int> toAge)
        {
            var fromAgeParameter = fromAge.HasValue ?
                new ObjectParameter("fromAge", fromAge) :
                new ObjectParameter("fromAge", typeof(int));
    
            var toAgeParameter = toAge.HasValue ?
                new ObjectParameter("toAge", toAge) :
                new ObjectParameter("toAge", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetActiveDemo_Result>("[MS_DEVEntities].[GetActiveDemo](@fromAge, @toAge)", fromAgeParameter, toAgeParameter);
        }
    
        [DbFunction("MS_DEVEntities", "GetOverViewCampaigns")]
        public virtual IQueryable<GetOverViewCampaigns_Result> GetOverViewCampaigns(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetOverViewCampaigns_Result>("[MS_DEVEntities].[GetOverViewCampaigns](@year)", yearParameter);
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        public virtual int CloneLoanRequest(Nullable<long> noteIDFrom, Nullable<long> noteIDTo)
        {
            var noteIDFromParameter = noteIDFrom.HasValue ?
                new ObjectParameter("NoteIDFrom", noteIDFrom) :
                new ObjectParameter("NoteIDFrom", typeof(long));
    
            var noteIDToParameter = noteIDTo.HasValue ?
                new ObjectParameter("NoteIDTo", noteIDTo) :
                new ObjectParameter("NoteIDTo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloneLoanRequest", noteIDFromParameter, noteIDToParameter);
        }
    
        public virtual ObjectResult<ESignLogAnlysis_Result> ESignLogAnlysis(Nullable<long> loanRequestID)
        {
            var loanRequestIDParameter = loanRequestID.HasValue ?
                new ObjectParameter("LoanRequestID", loanRequestID) :
                new ObjectParameter("LoanRequestID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ESignLogAnlysis_Result>("ESignLogAnlysis", loanRequestIDParameter);
        }
    
        public virtual int Get_AllLoanStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_AllLoanStatus");
        }
    
        public virtual int Get_Investor_eStatementSummary(Nullable<long> investorid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var investoridParameter = investorid.HasValue ?
                new ObjectParameter("investorid", investorid) :
                new ObjectParameter("investorid", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_Investor_eStatementSummary", investoridParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Get_Investor_OfferBrakDownForYear_Result> Get_Investor_OfferBrakDownForYear(Nullable<int> year, Nullable<long> investorId, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var investorIdParameter = investorId.HasValue ?
                new ObjectParameter("investorId", investorId) :
                new ObjectParameter("investorId", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Investor_OfferBrakDownForYear_Result>("Get_Investor_OfferBrakDownForYear", yearParameter, investorIdParameter, fromdateParameter, todateParameter);
        }
    
        public virtual int Get_Investor_OffersForeStatement(Nullable<long> investorId, Nullable<int> offerStatus, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var investorIdParameter = investorId.HasValue ?
                new ObjectParameter("investorId", investorId) :
                new ObjectParameter("investorId", typeof(long));
    
            var offerStatusParameter = offerStatus.HasValue ?
                new ObjectParameter("offerStatus", offerStatus) :
                new ObjectParameter("offerStatus", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_Investor_OffersForeStatement", investorIdParameter, offerStatusParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Get_Investor_OffersForeStatement_View_Result> Get_Investor_OffersForeStatement_View(Nullable<long> investorId, Nullable<int> offerStatus, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pageNum, Nullable<int> pageSize)
        {
            var investorIdParameter = investorId.HasValue ?
                new ObjectParameter("investorId", investorId) :
                new ObjectParameter("investorId", typeof(long));
    
            var offerStatusParameter = offerStatus.HasValue ?
                new ObjectParameter("offerStatus", offerStatus) :
                new ObjectParameter("offerStatus", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Investor_OffersForeStatement_View_Result>("Get_Investor_OffersForeStatement_View", investorIdParameter, offerStatusParameter, fromDateParameter, toDateParameter, pageNumParameter, pageSizeParameter);
        }
    
        public virtual int Get_Investor_OffersForeStatement1(Nullable<long> investorId, Nullable<int> offerStatus, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var investorIdParameter = investorId.HasValue ?
                new ObjectParameter("investorId", investorId) :
                new ObjectParameter("investorId", typeof(long));
    
            var offerStatusParameter = offerStatus.HasValue ?
                new ObjectParameter("offerStatus", offerStatus) :
                new ObjectParameter("offerStatus", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_Investor_OffersForeStatement1", investorIdParameter, offerStatusParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Get_Investor_ReapaymentForNote_Result> Get_Investor_ReapaymentForNote(Nullable<int> investorId, Nullable<int> requestid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var investorIdParameter = investorId.HasValue ?
                new ObjectParameter("investorId", investorId) :
                new ObjectParameter("investorId", typeof(int));
    
            var requestidParameter = requestid.HasValue ?
                new ObjectParameter("requestid", requestid) :
                new ObjectParameter("requestid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Investor_ReapaymentForNote_Result>("Get_Investor_ReapaymentForNote", investorIdParameter, requestidParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<Get_Investor_Transactions_Result> Get_Investor_Transactions(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> notType, Nullable<int> investorId, string activity, Nullable<int> pageNum, Nullable<int> pageSize)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var notTypeParameter = notType.HasValue ?
                new ObjectParameter("notType", notType) :
                new ObjectParameter("notType", typeof(int));
    
            var investorIdParameter = investorId.HasValue ?
                new ObjectParameter("investorId", investorId) :
                new ObjectParameter("investorId", typeof(int));
    
            var activityParameter = activity != null ?
                new ObjectParameter("activity", activity) :
                new ObjectParameter("activity", typeof(string));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Investor_Transactions_Result>("Get_Investor_Transactions", fromdateParameter, toDateParameter, notTypeParameter, investorIdParameter, activityParameter, pageNumParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Get_Investor_Transactions_Report_Result> Get_Investor_Transactions_Report(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate, Nullable<int> notType, Nullable<int> investorId, string activity)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var notTypeParameter = notType.HasValue ?
                new ObjectParameter("notType", notType) :
                new ObjectParameter("notType", typeof(int));
    
            var investorIdParameter = investorId.HasValue ?
                new ObjectParameter("investorId", investorId) :
                new ObjectParameter("investorId", typeof(int));
    
            var activityParameter = activity != null ?
                new ObjectParameter("activity", activity) :
                new ObjectParameter("activity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Investor_Transactions_Report_Result>("Get_Investor_Transactions_Report", fromdateParameter, toDateParameter, notTypeParameter, investorIdParameter, activityParameter);
        }
    
        public virtual ObjectResult<Get_InvetorInvestNoteTypes_Result> Get_InvetorInvestNoteTypes(Nullable<long> investorId, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var investorIdParameter = investorId.HasValue ?
                new ObjectParameter("investorId", investorId) :
                new ObjectParameter("investorId", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_InvetorInvestNoteTypes_Result>("Get_InvetorInvestNoteTypes", investorIdParameter, fromdateParameter, todateParameter);
        }
    
        public virtual int Get_New_Investments(Nullable<long> investorid)
        {
            var investoridParameter = investorid.HasValue ?
                new ObjectParameter("investorid", investorid) :
                new ObjectParameter("investorid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_New_Investments", investoridParameter);
        }
    
        public virtual ObjectResult<GetAAChargeList_Result> GetAAChargeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAAChargeList_Result>("GetAAChargeList");
        }
    
        public virtual ObjectResult<Nullable<long>> GetAAPreAllocatedNotesForMarkInsufficientFunds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetAAPreAllocatedNotesForMarkInsufficientFunds");
        }
    
        public virtual ObjectResult<string> GetCAQualifiedInvestors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCAQualifiedInvestors");
        }
    
        public virtual int GetInvestorNoteOffer(Nullable<long> investorid, Nullable<long> noteid)
        {
            var investoridParameter = investorid.HasValue ?
                new ObjectParameter("investorid", investorid) :
                new ObjectParameter("investorid", typeof(long));
    
            var noteidParameter = noteid.HasValue ?
                new ObjectParameter("noteid", noteid) :
                new ObjectParameter("noteid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetInvestorNoteOffer", investoridParameter, noteidParameter);
        }
    
        public virtual ObjectResult<GetInvestorsUserDataBaseReport_Result> GetInvestorsUserDataBaseReport(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvestorsUserDataBaseReport_Result>("GetInvestorsUserDataBaseReport", fromParameter, toParameter);
        }
    
        public virtual int InsertAACharge(Nullable<int> minimumInvestments, Nullable<int> maximumInvestments, Nullable<int> investCost)
        {
            var minimumInvestmentsParameter = minimumInvestments.HasValue ?
                new ObjectParameter("MinimumInvestments", minimumInvestments) :
                new ObjectParameter("MinimumInvestments", typeof(int));
    
            var maximumInvestmentsParameter = maximumInvestments.HasValue ?
                new ObjectParameter("MaximumInvestments", maximumInvestments) :
                new ObjectParameter("MaximumInvestments", typeof(int));
    
            var investCostParameter = investCost.HasValue ?
                new ObjectParameter("InvestCost", investCost) :
                new ObjectParameter("InvestCost", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAACharge", minimumInvestmentsParameter, maximumInvestmentsParameter, investCostParameter);
        }
    
        public virtual int InsertFundTranser(string accountNo, string cur, Nullable<decimal> openBalance, Nullable<decimal> closingBalance, Nullable<decimal> cosAvailableBalance, Nullable<decimal> totalCredit, Nullable<int> creditCount, Nullable<System.DateTime> statementDate, Nullable<int> debitCount, Nullable<decimal> totalDebit, Nullable<decimal> holdAmount, Nullable<System.DateTime> statementValueDate, Nullable<System.DateTime> postDate, Nullable<decimal> debitAmount, Nullable<decimal> creditAmount, string transactionTypeCode, string supplementaryDetails, string statementDetails, string ourRef, string additionalDetails, string nRIC)
        {
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var curParameter = cur != null ?
                new ObjectParameter("Cur", cur) :
                new ObjectParameter("Cur", typeof(string));
    
            var openBalanceParameter = openBalance.HasValue ?
                new ObjectParameter("OpenBalance", openBalance) :
                new ObjectParameter("OpenBalance", typeof(decimal));
    
            var closingBalanceParameter = closingBalance.HasValue ?
                new ObjectParameter("ClosingBalance", closingBalance) :
                new ObjectParameter("ClosingBalance", typeof(decimal));
    
            var cosAvailableBalanceParameter = cosAvailableBalance.HasValue ?
                new ObjectParameter("CosAvailableBalance", cosAvailableBalance) :
                new ObjectParameter("CosAvailableBalance", typeof(decimal));
    
            var totalCreditParameter = totalCredit.HasValue ?
                new ObjectParameter("TotalCredit", totalCredit) :
                new ObjectParameter("TotalCredit", typeof(decimal));
    
            var creditCountParameter = creditCount.HasValue ?
                new ObjectParameter("CreditCount", creditCount) :
                new ObjectParameter("CreditCount", typeof(int));
    
            var statementDateParameter = statementDate.HasValue ?
                new ObjectParameter("StatementDate", statementDate) :
                new ObjectParameter("StatementDate", typeof(System.DateTime));
    
            var debitCountParameter = debitCount.HasValue ?
                new ObjectParameter("DebitCount", debitCount) :
                new ObjectParameter("DebitCount", typeof(int));
    
            var totalDebitParameter = totalDebit.HasValue ?
                new ObjectParameter("TotalDebit", totalDebit) :
                new ObjectParameter("TotalDebit", typeof(decimal));
    
            var holdAmountParameter = holdAmount.HasValue ?
                new ObjectParameter("HoldAmount", holdAmount) :
                new ObjectParameter("HoldAmount", typeof(decimal));
    
            var statementValueDateParameter = statementValueDate.HasValue ?
                new ObjectParameter("StatementValueDate", statementValueDate) :
                new ObjectParameter("StatementValueDate", typeof(System.DateTime));
    
            var postDateParameter = postDate.HasValue ?
                new ObjectParameter("PostDate", postDate) :
                new ObjectParameter("PostDate", typeof(System.DateTime));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(decimal));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var transactionTypeCodeParameter = transactionTypeCode != null ?
                new ObjectParameter("TransactionTypeCode", transactionTypeCode) :
                new ObjectParameter("TransactionTypeCode", typeof(string));
    
            var supplementaryDetailsParameter = supplementaryDetails != null ?
                new ObjectParameter("SupplementaryDetails", supplementaryDetails) :
                new ObjectParameter("SupplementaryDetails", typeof(string));
    
            var statementDetailsParameter = statementDetails != null ?
                new ObjectParameter("StatementDetails", statementDetails) :
                new ObjectParameter("StatementDetails", typeof(string));
    
            var ourRefParameter = ourRef != null ?
                new ObjectParameter("OurRef", ourRef) :
                new ObjectParameter("OurRef", typeof(string));
    
            var additionalDetailsParameter = additionalDetails != null ?
                new ObjectParameter("AdditionalDetails", additionalDetails) :
                new ObjectParameter("AdditionalDetails", typeof(string));
    
            var nRICParameter = nRIC != null ?
                new ObjectParameter("NRIC", nRIC) :
                new ObjectParameter("NRIC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFundTranser", accountNoParameter, curParameter, openBalanceParameter, closingBalanceParameter, cosAvailableBalanceParameter, totalCreditParameter, creditCountParameter, statementDateParameter, debitCountParameter, totalDebitParameter, holdAmountParameter, statementValueDateParameter, postDateParameter, debitAmountParameter, creditAmountParameter, transactionTypeCodeParameter, supplementaryDetailsParameter, statementDetailsParameter, ourRefParameter, additionalDetailsParameter, nRICParameter);
        }
    
        public virtual int RepaymentRevert(string issuerRepID)
        {
            var issuerRepIDParameter = issuerRepID != null ?
                new ObjectParameter("IssuerRepID", issuerRepID) :
                new ObjectParameter("IssuerRepID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RepaymentRevert", issuerRepIDParameter);
        }
    
        public virtual int SP_AIS_GenerateLoanOffers(Nullable<long> newLoanRequestID)
        {
            var newLoanRequestIDParameter = newLoanRequestID.HasValue ?
                new ObjectParameter("NewLoanRequestID", newLoanRequestID) :
                new ObjectParameter("NewLoanRequestID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AIS_GenerateLoanOffers", newLoanRequestIDParameter);
        }
    
        public virtual int SP_AIS_GenerateRepaymentInvestor(Nullable<int> loanRequestID)
        {
            var loanRequestIDParameter = loanRequestID.HasValue ?
                new ObjectParameter("LoanRequestID", loanRequestID) :
                new ObjectParameter("LoanRequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AIS_GenerateRepaymentInvestor", loanRequestIDParameter);
        }
    
        public virtual int SP_AIS_GenerateRepaymentIssuer(Nullable<int> loanRequestID, Nullable<decimal> loanAmount)
        {
            var loanRequestIDParameter = loanRequestID.HasValue ?
                new ObjectParameter("LoanRequestID", loanRequestID) :
                new ObjectParameter("LoanRequestID", typeof(int));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AIS_GenerateRepaymentIssuer", loanRequestIDParameter, loanAmountParameter);
        }
    
        public virtual int SP_AIS_GenerateRestructuredLoan(Nullable<long> noteid, Nullable<decimal> interestRate, Nullable<decimal> newLoanAmount, Nullable<long> tenorInMonths, Nullable<System.DateTime> acceptedDate)
        {
            var noteidParameter = noteid.HasValue ?
                new ObjectParameter("noteid", noteid) :
                new ObjectParameter("noteid", typeof(long));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("interestRate", interestRate) :
                new ObjectParameter("interestRate", typeof(decimal));
    
            var newLoanAmountParameter = newLoanAmount.HasValue ?
                new ObjectParameter("NewLoanAmount", newLoanAmount) :
                new ObjectParameter("NewLoanAmount", typeof(decimal));
    
            var tenorInMonthsParameter = tenorInMonths.HasValue ?
                new ObjectParameter("TenorInMonths", tenorInMonths) :
                new ObjectParameter("TenorInMonths", typeof(long));
    
            var acceptedDateParameter = acceptedDate.HasValue ?
                new ObjectParameter("AcceptedDate", acceptedDate) :
                new ObjectParameter("AcceptedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AIS_GenerateRestructuredLoan", noteidParameter, interestRateParameter, newLoanAmountParameter, tenorInMonthsParameter, acceptedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_API_CheckIssuerExists(string companyRegistrationNumber, string name)
        {
            var companyRegistrationNumberParameter = companyRegistrationNumber != null ?
                new ObjectParameter("CompanyRegistrationNumber", companyRegistrationNumber) :
                new ObjectParameter("CompanyRegistrationNumber", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_API_CheckIssuerExists", companyRegistrationNumberParameter, nameParameter);
        }
    
        public virtual int SP_API_DeleteGuarantor(string name, string idnumber)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var idnumberParameter = idnumber != null ?
                new ObjectParameter("idnumber", idnumber) :
                new ObjectParameter("idnumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_DeleteGuarantor", nameParameter, idnumberParameter);
        }
    
        public virtual ObjectResult<SP_API_GetAllIssuers_Result> SP_API_GetAllIssuers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_API_GetAllIssuers_Result>("SP_API_GetAllIssuers");
        }
    
        public virtual ObjectResult<Nullable<int>> SP_API_GetCompanyDPRating(string name, string uen)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var uenParameter = uen != null ?
                new ObjectParameter("uen", uen) :
                new ObjectParameter("uen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_API_GetCompanyDPRating", nameParameter, uenParameter);
        }
    
        public virtual ObjectResult<string> SP_API_GetConfigValue(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_API_GetConfigValue", codeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_API_GetCountryId(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_API_GetCountryId", countryParameter);
        }
    
        public virtual ObjectResult<SP_API_GetDPRating_Result> SP_API_GetDPRating(string uen)
        {
            var uenParameter = uen != null ?
                new ObjectParameter("uen", uen) :
                new ObjectParameter("uen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_API_GetDPRating_Result>("SP_API_GetDPRating", uenParameter);
        }
    
        public virtual ObjectResult<SP_API_GetDPRatingPendingRequests_Result> SP_API_GetDPRatingPendingRequests(Nullable<short> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_API_GetDPRatingPendingRequests_Result>("SP_API_GetDPRatingPendingRequests", statusParameter);
        }
    
        public virtual ObjectResult<SP_API_GetDPRatingRequestByStatus_Result> SP_API_GetDPRatingRequestByStatus(Nullable<short> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_API_GetDPRatingRequestByStatus_Result>("SP_API_GetDPRatingRequestByStatus", statusParameter);
        }
    
        public virtual ObjectResult<SP_API_GetGuarantor_Result> SP_API_GetGuarantor(string name, string uen)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var uenParameter = uen != null ?
                new ObjectParameter("uen", uen) :
                new ObjectParameter("uen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_API_GetGuarantor_Result>("SP_API_GetGuarantor", nameParameter, uenParameter);
        }
    
        public virtual ObjectResult<SP_API_GetIssuer_Result> SP_API_GetIssuer(string name, string uen)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var uenParameter = uen != null ?
                new ObjectParameter("uen", uen) :
                new ObjectParameter("uen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_API_GetIssuer_Result>("SP_API_GetIssuer", nameParameter, uenParameter);
        }
    
        public virtual ObjectResult<SP_API_GetIssuerDetails_Result> SP_API_GetIssuerDetails(string name, string uen)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var uenParameter = uen != null ?
                new ObjectParameter("uen", uen) :
                new ObjectParameter("uen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_API_GetIssuerDetails_Result>("SP_API_GetIssuerDetails", nameParameter, uenParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_API_GetIssuerID(string name, string uen)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var uenParameter = uen != null ?
                new ObjectParameter("uen", uen) :
                new ObjectParameter("uen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_API_GetIssuerID", nameParameter, uenParameter);
        }
    
        public virtual ObjectResult<SP_API_GetNotesByIssuerRegisterNo_Result> SP_API_GetNotesByIssuerRegisterNo(string companyRegistrationNumber)
        {
            var companyRegistrationNumberParameter = companyRegistrationNumber != null ?
                new ObjectParameter("CompanyRegistrationNumber", companyRegistrationNumber) :
                new ObjectParameter("CompanyRegistrationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_API_GetNotesByIssuerRegisterNo_Result>("SP_API_GetNotesByIssuerRegisterNo", companyRegistrationNumberParameter);
        }
    
        public virtual ObjectResult<SP_API_GetUserByRegistrationNo_Result> SP_API_GetUserByRegistrationNo(string companyRegistrationNumber)
        {
            var companyRegistrationNumberParameter = companyRegistrationNumber != null ?
                new ObjectParameter("CompanyRegistrationNumber", companyRegistrationNumber) :
                new ObjectParameter("CompanyRegistrationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_API_GetUserByRegistrationNo_Result>("SP_API_GetUserByRegistrationNo", companyRegistrationNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_API_GuarantorExists(string name, string uen)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var uenParameter = uen != null ?
                new ObjectParameter("uen", uen) :
                new ObjectParameter("uen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_API_GuarantorExists", nameParameter, uenParameter);
        }
    
        public virtual int SP_API_InsertAuditors(Nullable<int> issuerID, string name, Nullable<System.DateTime> dateOfAudit)
        {
            var issuerIDParameter = issuerID.HasValue ?
                new ObjectParameter("issuerID", issuerID) :
                new ObjectParameter("issuerID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var dateOfAuditParameter = dateOfAudit.HasValue ?
                new ObjectParameter("dateOfAudit", dateOfAudit) :
                new ObjectParameter("dateOfAudit", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertAuditors", issuerIDParameter, nameParameter, dateOfAuditParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_API_InsertBankruptcy(Nullable<int> guarantorid, string number)
        {
            var guarantoridParameter = guarantorid.HasValue ?
                new ObjectParameter("guarantorid", guarantorid) :
                new ObjectParameter("guarantorid", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_API_InsertBankruptcy", guarantoridParameter, numberParameter);
        }
    
        public virtual int SP_API_InsertBankruptcyFIling(Nullable<int> bid, string number, string yearNum, Nullable<System.DateTime> filingdate, string petitioner, string casestatus, string partystatus, string amount, string status, string amounts, Nullable<System.DateTime> updated)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var yearNumParameter = yearNum != null ?
                new ObjectParameter("yearNum", yearNum) :
                new ObjectParameter("yearNum", typeof(string));
    
            var filingdateParameter = filingdate.HasValue ?
                new ObjectParameter("filingdate", filingdate) :
                new ObjectParameter("filingdate", typeof(System.DateTime));
    
            var petitionerParameter = petitioner != null ?
                new ObjectParameter("petitioner", petitioner) :
                new ObjectParameter("petitioner", typeof(string));
    
            var casestatusParameter = casestatus != null ?
                new ObjectParameter("casestatus", casestatus) :
                new ObjectParameter("casestatus", typeof(string));
    
            var partystatusParameter = partystatus != null ?
                new ObjectParameter("partystatus", partystatus) :
                new ObjectParameter("partystatus", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var amountsParameter = amounts != null ?
                new ObjectParameter("amounts", amounts) :
                new ObjectParameter("amounts", typeof(string));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("updated", updated) :
                new ObjectParameter("updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertBankruptcyFIling", bidParameter, numberParameter, yearNumParameter, filingdateParameter, petitionerParameter, casestatusParameter, partystatusParameter, amountParameter, statusParameter, amountsParameter, updatedParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_API_InsertBusinessLitigation(Nullable<int> guarantorid, string number)
        {
            var guarantoridParameter = guarantorid.HasValue ?
                new ObjectParameter("guarantorid", guarantorid) :
                new ObjectParameter("guarantorid", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_API_InsertBusinessLitigation", guarantoridParameter, numberParameter);
        }
    
        public virtual int SP_API_InsertBusinessLitigationFiling(Nullable<int> blid, string court, string number, string yearNum, Nullable<System.DateTime> filingDate, string plaintiff, string remarks, string status, string amounts, Nullable<System.DateTime> updated)
        {
            var blidParameter = blid.HasValue ?
                new ObjectParameter("blid", blid) :
                new ObjectParameter("blid", typeof(int));
    
            var courtParameter = court != null ?
                new ObjectParameter("court", court) :
                new ObjectParameter("court", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var yearNumParameter = yearNum != null ?
                new ObjectParameter("yearNum", yearNum) :
                new ObjectParameter("yearNum", typeof(string));
    
            var filingDateParameter = filingDate.HasValue ?
                new ObjectParameter("filingDate", filingDate) :
                new ObjectParameter("filingDate", typeof(System.DateTime));
    
            var plaintiffParameter = plaintiff != null ?
                new ObjectParameter("plaintiff", plaintiff) :
                new ObjectParameter("plaintiff", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var amountsParameter = amounts != null ?
                new ObjectParameter("amounts", amounts) :
                new ObjectParameter("amounts", typeof(string));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("updated", updated) :
                new ObjectParameter("updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertBusinessLitigationFiling", blidParameter, courtParameter, numberParameter, yearNumParameter, filingDateParameter, plaintiffParameter, remarksParameter, statusParameter, amountsParameter, updatedParameter);
        }
    
        public virtual int SP_API_InsertCapitalStructure(Nullable<int> issuerID, Nullable<int> num, string currency, Nullable<double> amount, string typeOfStructure)
        {
            var issuerIDParameter = issuerID.HasValue ?
                new ObjectParameter("issuerID", issuerID) :
                new ObjectParameter("issuerID", typeof(int));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("currency", currency) :
                new ObjectParameter("currency", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(double));
    
            var typeOfStructureParameter = typeOfStructure != null ?
                new ObjectParameter("typeOfStructure", typeOfStructure) :
                new ObjectParameter("typeOfStructure", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertCapitalStructure", issuerIDParameter, numParameter, currencyParameter, amountParameter, typeOfStructureParameter);
        }
    
        public virtual int SP_API_InsertDPRatingOrderRequest(string referenceNumber, string orderNo, Nullable<System.DateTime> scheduleTime, Nullable<short> status)
        {
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            var scheduleTimeParameter = scheduleTime.HasValue ?
                new ObjectParameter("ScheduleTime", scheduleTime) :
                new ObjectParameter("ScheduleTime", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertDPRatingOrderRequest", referenceNumberParameter, orderNoParameter, scheduleTimeParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_API_InsertDPRatingRequest(string referenceNumber, string name, string registrationNumber, string fileIds, Nullable<short> status)
        {
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var fileIdsParameter = fileIds != null ?
                new ObjectParameter("FileIds", fileIds) :
                new ObjectParameter("FileIds", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_API_InsertDPRatingRequest", referenceNumberParameter, nameParameter, registrationNumberParameter, fileIdsParameter, statusParameter);
        }
    
        public virtual int SP_API_InsertFilings(Nullable<int> writID, string sn, string court, string caseNumber, Nullable<int> filingYear, Nullable<System.DateTime> filingDate, string plaintiff, string remarks, string status, string amounts, Nullable<System.DateTime> updated)
        {
            var writIDParameter = writID.HasValue ?
                new ObjectParameter("writID", writID) :
                new ObjectParameter("writID", typeof(int));
    
            var snParameter = sn != null ?
                new ObjectParameter("sn", sn) :
                new ObjectParameter("sn", typeof(string));
    
            var courtParameter = court != null ?
                new ObjectParameter("court", court) :
                new ObjectParameter("court", typeof(string));
    
            var caseNumberParameter = caseNumber != null ?
                new ObjectParameter("caseNumber", caseNumber) :
                new ObjectParameter("caseNumber", typeof(string));
    
            var filingYearParameter = filingYear.HasValue ?
                new ObjectParameter("filingYear", filingYear) :
                new ObjectParameter("filingYear", typeof(int));
    
            var filingDateParameter = filingDate.HasValue ?
                new ObjectParameter("filingDate", filingDate) :
                new ObjectParameter("filingDate", typeof(System.DateTime));
    
            var plaintiffParameter = plaintiff != null ?
                new ObjectParameter("plaintiff", plaintiff) :
                new ObjectParameter("plaintiff", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var amountsParameter = amounts != null ?
                new ObjectParameter("amounts", amounts) :
                new ObjectParameter("amounts", typeof(string));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("updated", updated) :
                new ObjectParameter("updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertFilings", writIDParameter, snParameter, courtParameter, caseNumberParameter, filingYearParameter, filingDateParameter, plaintiffParameter, remarksParameter, statusParameter, amountsParameter, updatedParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_API_InsertGuarantor(Nullable<int> issuerid, string name, string namedp, string idnumber, string type)
        {
            var issueridParameter = issuerid.HasValue ?
                new ObjectParameter("issuerid", issuerid) :
                new ObjectParameter("issuerid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var namedpParameter = namedp != null ?
                new ObjectParameter("namedp", namedp) :
                new ObjectParameter("namedp", typeof(string));
    
            var idnumberParameter = idnumber != null ?
                new ObjectParameter("idnumber", idnumber) :
                new ObjectParameter("idnumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_API_InsertGuarantor", issueridParameter, nameParameter, namedpParameter, idnumberParameter, typeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_API_InsertIndividualLitigation(Nullable<int> guarantorid, string number)
        {
            var guarantoridParameter = guarantorid.HasValue ?
                new ObjectParameter("guarantorid", guarantorid) :
                new ObjectParameter("guarantorid", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_API_InsertIndividualLitigation", guarantoridParameter, numberParameter);
        }
    
        public virtual int SP_API_InsertIndividualLitigationFiling(Nullable<int> ilid, string court, string number, string yearNum, Nullable<System.DateTime> filingDate, string plaintiff, string remarks, string status, string amounts, Nullable<System.DateTime> updated)
        {
            var ilidParameter = ilid.HasValue ?
                new ObjectParameter("ilid", ilid) :
                new ObjectParameter("ilid", typeof(int));
    
            var courtParameter = court != null ?
                new ObjectParameter("court", court) :
                new ObjectParameter("court", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var yearNumParameter = yearNum != null ?
                new ObjectParameter("yearNum", yearNum) :
                new ObjectParameter("yearNum", typeof(string));
    
            var filingDateParameter = filingDate.HasValue ?
                new ObjectParameter("filingDate", filingDate) :
                new ObjectParameter("filingDate", typeof(System.DateTime));
    
            var plaintiffParameter = plaintiff != null ?
                new ObjectParameter("plaintiff", plaintiff) :
                new ObjectParameter("plaintiff", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var amountsParameter = amounts != null ?
                new ObjectParameter("amounts", amounts) :
                new ObjectParameter("amounts", typeof(string));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("updated", updated) :
                new ObjectParameter("updated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertIndividualLitigationFiling", ilidParameter, courtParameter, numberParameter, yearNumParameter, filingDateParameter, plaintiffParameter, remarksParameter, statusParameter, amountsParameter, updatedParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_API_InsertIssuer(string name, string reg, Nullable<System.DateTime> regDate, string country, Nullable<System.DateTime> formerDate, string formerName, string businessYears, string legalEntity, string address, Nullable<System.DateTime> addressDate, string industry, string sector, string principalActivities, string status, Nullable<System.DateTime> statusDate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var regParameter = reg != null ?
                new ObjectParameter("reg", reg) :
                new ObjectParameter("reg", typeof(string));
    
            var regDateParameter = regDate.HasValue ?
                new ObjectParameter("regDate", regDate) :
                new ObjectParameter("regDate", typeof(System.DateTime));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var formerDateParameter = formerDate.HasValue ?
                new ObjectParameter("formerDate", formerDate) :
                new ObjectParameter("formerDate", typeof(System.DateTime));
    
            var formerNameParameter = formerName != null ?
                new ObjectParameter("formerName", formerName) :
                new ObjectParameter("formerName", typeof(string));
    
            var businessYearsParameter = businessYears != null ?
                new ObjectParameter("businessYears", businessYears) :
                new ObjectParameter("businessYears", typeof(string));
    
            var legalEntityParameter = legalEntity != null ?
                new ObjectParameter("legalEntity", legalEntity) :
                new ObjectParameter("legalEntity", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var addressDateParameter = addressDate.HasValue ?
                new ObjectParameter("addressDate", addressDate) :
                new ObjectParameter("addressDate", typeof(System.DateTime));
    
            var industryParameter = industry != null ?
                new ObjectParameter("industry", industry) :
                new ObjectParameter("industry", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("sector", sector) :
                new ObjectParameter("sector", typeof(string));
    
            var principalActivitiesParameter = principalActivities != null ?
                new ObjectParameter("principalActivities", principalActivities) :
                new ObjectParameter("principalActivities", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var statusDateParameter = statusDate.HasValue ?
                new ObjectParameter("statusDate", statusDate) :
                new ObjectParameter("statusDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_API_InsertIssuer", nameParameter, regParameter, regDateParameter, countryParameter, formerDateParameter, formerNameParameter, businessYearsParameter, legalEntityParameter, addressParameter, addressDateParameter, industryParameter, sectorParameter, principalActivitiesParameter, statusParameter, statusDateParameter);
        }
    
        public virtual int SP_API_InsertRepresentatives(Nullable<int> issuerID, string name, string id, string nationality, Nullable<System.DateTime> dateOfAppointment, Nullable<System.DateTime> endDate, string position, string address)
        {
            var issuerIDParameter = issuerID.HasValue ?
                new ObjectParameter("issuerID", issuerID) :
                new ObjectParameter("issuerID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("nationality", nationality) :
                new ObjectParameter("nationality", typeof(string));
    
            var dateOfAppointmentParameter = dateOfAppointment.HasValue ?
                new ObjectParameter("dateOfAppointment", dateOfAppointment) :
                new ObjectParameter("dateOfAppointment", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertRepresentatives", issuerIDParameter, nameParameter, idParameter, nationalityParameter, dateOfAppointmentParameter, endDateParameter, positionParameter, addressParameter);
        }
    
        public virtual int SP_API_InsertSearchCount(Nullable<int> issuerID, Nullable<int> yr, Nullable<int> total, string jan, string feb, string mar, string apr, string may, string jun, string jul, string aug, string sep, string octo, string nov, string dece)
        {
            var issuerIDParameter = issuerID.HasValue ?
                new ObjectParameter("issuerID", issuerID) :
                new ObjectParameter("issuerID", typeof(int));
    
            var yrParameter = yr.HasValue ?
                new ObjectParameter("yr", yr) :
                new ObjectParameter("yr", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(int));
    
            var janParameter = jan != null ?
                new ObjectParameter("jan", jan) :
                new ObjectParameter("jan", typeof(string));
    
            var febParameter = feb != null ?
                new ObjectParameter("feb", feb) :
                new ObjectParameter("feb", typeof(string));
    
            var marParameter = mar != null ?
                new ObjectParameter("mar", mar) :
                new ObjectParameter("mar", typeof(string));
    
            var aprParameter = apr != null ?
                new ObjectParameter("apr", apr) :
                new ObjectParameter("apr", typeof(string));
    
            var mayParameter = may != null ?
                new ObjectParameter("may", may) :
                new ObjectParameter("may", typeof(string));
    
            var junParameter = jun != null ?
                new ObjectParameter("jun", jun) :
                new ObjectParameter("jun", typeof(string));
    
            var julParameter = jul != null ?
                new ObjectParameter("jul", jul) :
                new ObjectParameter("jul", typeof(string));
    
            var augParameter = aug != null ?
                new ObjectParameter("aug", aug) :
                new ObjectParameter("aug", typeof(string));
    
            var sepParameter = sep != null ?
                new ObjectParameter("sep", sep) :
                new ObjectParameter("sep", typeof(string));
    
            var octoParameter = octo != null ?
                new ObjectParameter("octo", octo) :
                new ObjectParameter("octo", typeof(string));
    
            var novParameter = nov != null ?
                new ObjectParameter("nov", nov) :
                new ObjectParameter("nov", typeof(string));
    
            var deceParameter = dece != null ?
                new ObjectParameter("dece", dece) :
                new ObjectParameter("dece", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertSearchCount", issuerIDParameter, yrParameter, totalParameter, janParameter, febParameter, marParameter, aprParameter, mayParameter, junParameter, julParameter, augParameter, sepParameter, octoParameter, novParameter, deceParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_API_InsertShareholder(Nullable<int> issuerID, string numberOfShareholders, string shareholderOptions)
        {
            var issuerIDParameter = issuerID.HasValue ?
                new ObjectParameter("issuerID", issuerID) :
                new ObjectParameter("issuerID", typeof(int));
    
            var numberOfShareholdersParameter = numberOfShareholders != null ?
                new ObjectParameter("numberOfShareholders", numberOfShareholders) :
                new ObjectParameter("numberOfShareholders", typeof(string));
    
            var shareholderOptionsParameter = shareholderOptions != null ?
                new ObjectParameter("shareholderOptions", shareholderOptions) :
                new ObjectParameter("shareholderOptions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_API_InsertShareholder", issuerIDParameter, numberOfShareholdersParameter, shareholderOptionsParameter);
        }
    
        public virtual int SP_API_InsertShareholderDetails(Nullable<int> shareholderID, string name, string idNumber, string typeOfID, string nationality, string address, Nullable<int> shareNumber, string shareCurrency)
        {
            var shareholderIDParameter = shareholderID.HasValue ?
                new ObjectParameter("shareholderID", shareholderID) :
                new ObjectParameter("shareholderID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var idNumberParameter = idNumber != null ?
                new ObjectParameter("idNumber", idNumber) :
                new ObjectParameter("idNumber", typeof(string));
    
            var typeOfIDParameter = typeOfID != null ?
                new ObjectParameter("typeOfID", typeOfID) :
                new ObjectParameter("typeOfID", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("nationality", nationality) :
                new ObjectParameter("nationality", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var shareNumberParameter = shareNumber.HasValue ?
                new ObjectParameter("shareNumber", shareNumber) :
                new ObjectParameter("shareNumber", typeof(int));
    
            var shareCurrencyParameter = shareCurrency != null ?
                new ObjectParameter("shareCurrency", shareCurrency) :
                new ObjectParameter("shareCurrency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_InsertShareholderDetails", shareholderIDParameter, nameParameter, idNumberParameter, typeOfIDParameter, nationalityParameter, addressParameter, shareNumberParameter, shareCurrencyParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_API_InsertWritOfSummons(Nullable<int> issuerID, Nullable<int> numberOfSuits)
        {
            var issuerIDParameter = issuerID.HasValue ?
                new ObjectParameter("issuerID", issuerID) :
                new ObjectParameter("issuerID", typeof(int));
    
            var numberOfSuitsParameter = numberOfSuits.HasValue ?
                new ObjectParameter("numberOfSuits", numberOfSuits) :
                new ObjectParameter("numberOfSuits", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_API_InsertWritOfSummons", issuerIDParameter, numberOfSuitsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_API_IsDPRatingExistsAndNotExpired(string name, string registrationNumber, Nullable<int> expiryPeriodInMonths)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var expiryPeriodInMonthsParameter = expiryPeriodInMonths.HasValue ?
                new ObjectParameter("ExpiryPeriodInMonths", expiryPeriodInMonths) :
                new ObjectParameter("ExpiryPeriodInMonths", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_API_IsDPRatingExistsAndNotExpired", nameParameter, registrationNumberParameter, expiryPeriodInMonthsParameter);
        }
    
        public virtual int SP_API_TruncateReportData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_TruncateReportData");
        }
    
        public virtual int SP_API_UpdateConfiguration(string code, string value)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_UpdateConfiguration", codeParameter, valueParameter);
        }
    
        public virtual int SP_API_UpdateDPOrderStatus(Nullable<int> iD, string referenceNumber, Nullable<short> status, string rating)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            var ratingParameter = rating != null ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_UpdateDPOrderStatus", iDParameter, referenceNumberParameter, statusParameter, ratingParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_API_UpdateDPRating(Nullable<long> iD, Nullable<short> status, string rating)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            var ratingParameter = rating != null ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_API_UpdateDPRating", iDParameter, statusParameter, ratingParameter);
        }
    
        public virtual int SP_API_UpdateDPRatingRequestStatus(Nullable<long> iD, Nullable<short> status)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_API_UpdateDPRatingRequestStatus", iDParameter, statusParameter);
        }
    
        public virtual int SP_CalculateMoolahpoints(Nullable<long> promationID)
        {
            var promationIDParameter = promationID.HasValue ?
                new ObjectParameter("PromationID", promationID) :
                new ObjectParameter("PromationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CalculateMoolahpoints", promationIDParameter);
        }
    
        public virtual int SP_CalculateRiskAdjustedOfReturn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CalculateRiskAdjustedOfReturn");
        }
    
        public virtual int SP_CheckOverpaidRepayments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckOverpaidRepayments");
        }
    
        public virtual int SP_CorrectEndBalance(Nullable<int> loanRequestID)
        {
            var loanRequestIDParameter = loanRequestID.HasValue ?
                new ObjectParameter("LoanRequestID", loanRequestID) :
                new ObjectParameter("LoanRequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CorrectEndBalance", loanRequestIDParameter);
        }
    
        public virtual int SP_CorrectLIOfLateRepayments(Nullable<System.Guid> issuerRepID, ObjectParameter totalActualLI)
        {
            var issuerRepIDParameter = issuerRepID.HasValue ?
                new ObjectParameter("IssuerRepID", issuerRepID) :
                new ObjectParameter("IssuerRepID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CorrectLIOfLateRepayments", issuerRepIDParameter, totalActualLI);
        }
    
        public virtual int SP_CreateNewLoan(Nullable<decimal> loanAmount, Nullable<decimal> interestRate, Nullable<int> productID, string tenure, Nullable<long> userID, Nullable<System.DateTime> approveDate, string summaryCompanyPro, string detailedCompanyPro, Nullable<int> numberOfEmployees, string loanPurposeDescription, string headline, Nullable<System.DateTime> launchDate, Nullable<decimal> minimumOfferAmount, Nullable<double> depositeAmount)
        {
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var tenureParameter = tenure != null ?
                new ObjectParameter("Tenure", tenure) :
                new ObjectParameter("Tenure", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var approveDateParameter = approveDate.HasValue ?
                new ObjectParameter("ApproveDate", approveDate) :
                new ObjectParameter("ApproveDate", typeof(System.DateTime));
    
            var summaryCompanyProParameter = summaryCompanyPro != null ?
                new ObjectParameter("SummaryCompanyPro", summaryCompanyPro) :
                new ObjectParameter("SummaryCompanyPro", typeof(string));
    
            var detailedCompanyProParameter = detailedCompanyPro != null ?
                new ObjectParameter("DetailedCompanyPro", detailedCompanyPro) :
                new ObjectParameter("DetailedCompanyPro", typeof(string));
    
            var numberOfEmployeesParameter = numberOfEmployees.HasValue ?
                new ObjectParameter("NumberOfEmployees", numberOfEmployees) :
                new ObjectParameter("NumberOfEmployees", typeof(int));
    
            var loanPurposeDescriptionParameter = loanPurposeDescription != null ?
                new ObjectParameter("LoanPurposeDescription", loanPurposeDescription) :
                new ObjectParameter("LoanPurposeDescription", typeof(string));
    
            var headlineParameter = headline != null ?
                new ObjectParameter("Headline", headline) :
                new ObjectParameter("Headline", typeof(string));
    
            var launchDateParameter = launchDate.HasValue ?
                new ObjectParameter("LaunchDate", launchDate) :
                new ObjectParameter("LaunchDate", typeof(System.DateTime));
    
            var minimumOfferAmountParameter = minimumOfferAmount.HasValue ?
                new ObjectParameter("MinimumOfferAmount", minimumOfferAmount) :
                new ObjectParameter("MinimumOfferAmount", typeof(decimal));
    
            var depositeAmountParameter = depositeAmount.HasValue ?
                new ObjectParameter("DepositeAmount", depositeAmount) :
                new ObjectParameter("DepositeAmount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreateNewLoan", loanAmountParameter, interestRateParameter, productIDParameter, tenureParameter, userIDParameter, approveDateParameter, summaryCompanyProParameter, detailedCompanyProParameter, numberOfEmployeesParameter, loanPurposeDescriptionParameter, headlineParameter, launchDateParameter, minimumOfferAmountParameter, depositeAmountParameter);
        }
    
        public virtual int SP_CreditMoolahPoint(string username, Nullable<decimal> points)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var pointsParameter = points.HasValue ?
                new ObjectParameter("Points", points) :
                new ObjectParameter("Points", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreditMoolahPoint", usernameParameter, pointsParameter);
        }
    
        public virtual int SP_DeleteDuplicateLI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteDuplicateLI");
        }
    
        public virtual int SP_Falcon_GenerateLoanOffers(Nullable<long> newLoanRequestID)
        {
            var newLoanRequestIDParameter = newLoanRequestID.HasValue ?
                new ObjectParameter("NewLoanRequestID", newLoanRequestID) :
                new ObjectParameter("NewLoanRequestID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Falcon_GenerateLoanOffers", newLoanRequestIDParameter);
        }
    
        public virtual int SP_Falcon_GenerateRepaymentInvestor(Nullable<int> loanRequestID)
        {
            var loanRequestIDParameter = loanRequestID.HasValue ?
                new ObjectParameter("LoanRequestID", loanRequestID) :
                new ObjectParameter("LoanRequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Falcon_GenerateRepaymentInvestor", loanRequestIDParameter);
        }
    
        public virtual int SP_Falcon_GenerateRepaymentIssuer(Nullable<int> loanRequestID, Nullable<decimal> loanAmount)
        {
            var loanRequestIDParameter = loanRequestID.HasValue ?
                new ObjectParameter("LoanRequestID", loanRequestID) :
                new ObjectParameter("LoanRequestID", typeof(int));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Falcon_GenerateRepaymentIssuer", loanRequestIDParameter, loanAmountParameter);
        }
    
        public virtual int SP_Falcon_GenerateRestructuredLoan(Nullable<long> noteid, Nullable<decimal> interestRate, Nullable<decimal> newLoanAmount, Nullable<long> tenorInMonths, Nullable<System.DateTime> acceptedDate)
        {
            var noteidParameter = noteid.HasValue ?
                new ObjectParameter("noteid", noteid) :
                new ObjectParameter("noteid", typeof(long));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("interestRate", interestRate) :
                new ObjectParameter("interestRate", typeof(decimal));
    
            var newLoanAmountParameter = newLoanAmount.HasValue ?
                new ObjectParameter("NewLoanAmount", newLoanAmount) :
                new ObjectParameter("NewLoanAmount", typeof(decimal));
    
            var tenorInMonthsParameter = tenorInMonths.HasValue ?
                new ObjectParameter("TenorInMonths", tenorInMonths) :
                new ObjectParameter("TenorInMonths", typeof(long));
    
            var acceptedDateParameter = acceptedDate.HasValue ?
                new ObjectParameter("AcceptedDate", acceptedDate) :
                new ObjectParameter("AcceptedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Falcon_GenerateRestructuredLoan", noteidParameter, interestRateParameter, newLoanAmountParameter, tenorInMonthsParameter, acceptedDateParameter);
        }
    
        public virtual int SP_FundTransferLoad()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FundTransferLoad");
        }
    
        public virtual int SP_GenerateRepayment(Nullable<int> loanRequestID, Nullable<decimal> loanAmount, Nullable<double> annualRate, Nullable<double> loanPeriodInMonths)
        {
            var loanRequestIDParameter = loanRequestID.HasValue ?
                new ObjectParameter("LoanRequestID", loanRequestID) :
                new ObjectParameter("LoanRequestID", typeof(int));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var annualRateParameter = annualRate.HasValue ?
                new ObjectParameter("AnnualRate", annualRate) :
                new ObjectParameter("AnnualRate", typeof(double));
    
            var loanPeriodInMonthsParameter = loanPeriodInMonths.HasValue ?
                new ObjectParameter("LoanPeriodInMonths", loanPeriodInMonths) :
                new ObjectParameter("LoanPeriodInMonths", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GenerateRepayment", loanRequestIDParameter, loanAmountParameter, annualRateParameter, loanPeriodInMonthsParameter);
        }
    
        public virtual int SP_GenerateRepaymentInvestor(Nullable<int> loanRequestID, Nullable<double> loanPeriodInMonths)
        {
            var loanRequestIDParameter = loanRequestID.HasValue ?
                new ObjectParameter("LoanRequestID", loanRequestID) :
                new ObjectParameter("LoanRequestID", typeof(int));
    
            var loanPeriodInMonthsParameter = loanPeriodInMonths.HasValue ?
                new ObjectParameter("LoanPeriodInMonths", loanPeriodInMonths) :
                new ObjectParameter("LoanPeriodInMonths", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GenerateRepaymentInvestor", loanRequestIDParameter, loanPeriodInMonthsParameter);
        }
    
        public virtual int SP_GenerateRepaymentIssuer(Nullable<int> loanRequestID, Nullable<decimal> loanAmount, Nullable<double> annualRate, Nullable<double> loanPeriodInMonths)
        {
            var loanRequestIDParameter = loanRequestID.HasValue ?
                new ObjectParameter("LoanRequestID", loanRequestID) :
                new ObjectParameter("LoanRequestID", typeof(int));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var annualRateParameter = annualRate.HasValue ?
                new ObjectParameter("AnnualRate", annualRate) :
                new ObjectParameter("AnnualRate", typeof(double));
    
            var loanPeriodInMonthsParameter = loanPeriodInMonths.HasValue ?
                new ObjectParameter("LoanPeriodInMonths", loanPeriodInMonths) :
                new ObjectParameter("LoanPeriodInMonths", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GenerateRepaymentIssuer", loanRequestIDParameter, loanAmountParameter, annualRateParameter, loanPeriodInMonthsParameter);
        }
    
        public virtual int SP_GenerateRestructuredLoan(Nullable<long> noteid, Nullable<decimal> interestRate, Nullable<decimal> newLoanAmount, Nullable<long> tenorInMonths, Nullable<System.DateTime> acceptedDate)
        {
            var noteidParameter = noteid.HasValue ?
                new ObjectParameter("noteid", noteid) :
                new ObjectParameter("noteid", typeof(long));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("interestRate", interestRate) :
                new ObjectParameter("interestRate", typeof(decimal));
    
            var newLoanAmountParameter = newLoanAmount.HasValue ?
                new ObjectParameter("NewLoanAmount", newLoanAmount) :
                new ObjectParameter("NewLoanAmount", typeof(decimal));
    
            var tenorInMonthsParameter = tenorInMonths.HasValue ?
                new ObjectParameter("TenorInMonths", tenorInMonths) :
                new ObjectParameter("TenorInMonths", typeof(long));
    
            var acceptedDateParameter = acceptedDate.HasValue ?
                new ObjectParameter("AcceptedDate", acceptedDate) :
                new ObjectParameter("AcceptedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GenerateRestructuredLoan", noteidParameter, interestRateParameter, newLoanAmountParameter, tenorInMonthsParameter, acceptedDateParameter);
        }
    
        public virtual ObjectResult<SP_GetActiveDemo_Result> SP_GetActiveDemo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetActiveDemo_Result>("SP_GetActiveDemo");
        }
    
        public virtual ObjectResult<SP_GetActiveTotalSignUp_Result> SP_GetActiveTotalSignUp(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetActiveTotalSignUp_Result>("SP_GetActiveTotalSignUp", yearParameter);
        }
    
        public virtual ObjectResult<SP_GetAllCampaingAsDateOf_Result> SP_GetAllCampaingAsDateOf(Nullable<System.DateTime> issueDatetime)
        {
            var issueDatetimeParameter = issueDatetime.HasValue ?
                new ObjectParameter("issueDatetime", issueDatetime) :
                new ObjectParameter("issueDatetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllCampaingAsDateOf_Result>("SP_GetAllCampaingAsDateOf", issueDatetimeParameter);
        }
    
        public virtual ObjectResult<SP_GetAllOutStandingLoans_Result> SP_GetAllOutStandingLoans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllOutStandingLoans_Result>("SP_GetAllOutStandingLoans");
        }
    
        public virtual ObjectResult<SP_GetApprovedTotalSignUp_Result> SP_GetApprovedTotalSignUp(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetApprovedTotalSignUp_Result>("SP_GetApprovedTotalSignUp", yearParameter);
        }
    
        public virtual ObjectResult<SP_GetBorrowers_Result> SP_GetBorrowers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBorrowers_Result>("SP_GetBorrowers");
        }
    
        public virtual ObjectResult<SP_GetCampaignSummary_Result> SP_GetCampaignSummary(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCampaignSummary_Result>("SP_GetCampaignSummary", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SP_GetCampaignSummaryDetails_Result> SP_GetCampaignSummaryDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCampaignSummaryDetails_Result>("SP_GetCampaignSummaryDetails");
        }
    
        public virtual ObjectResult<SP_GetCompletedNotesDetails_Result> SP_GetCompletedNotesDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCompletedNotesDetails_Result>("SP_GetCompletedNotesDetails");
        }
    
        public virtual int SP_GetInvestorDashboardValues(Nullable<long> investorid)
        {
            var investoridParameter = investorid.HasValue ?
                new ObjectParameter("investorid", investorid) :
                new ObjectParameter("investorid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetInvestorDashboardValues", investoridParameter);
        }
    
        public virtual int SP_GetInvestorDashboardValues1(Nullable<long> investorid)
        {
            var investoridParameter = investorid.HasValue ?
                new ObjectParameter("investorid", investorid) :
                new ObjectParameter("investorid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetInvestorDashboardValues1", investoridParameter);
        }
    
        public virtual ObjectResult<SP_GetInvestorKnowledgeAssesmentDetails_Result> SP_GetInvestorKnowledgeAssesmentDetails(ObjectParameter requestID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetInvestorKnowledgeAssesmentDetails_Result>("SP_GetInvestorKnowledgeAssesmentDetails", requestID);
        }
    
        public virtual ObjectResult<SP_GetInvestorPortfolio_Result> SP_GetInvestorPortfolio(Nullable<long> investorID)
        {
            var investorIDParameter = investorID.HasValue ?
                new ObjectParameter("investorID", investorID) :
                new ObjectParameter("investorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetInvestorPortfolio_Result>("SP_GetInvestorPortfolio", investorIDParameter);
        }
    
        public virtual ObjectResult<SP_GetInvestorsBalanceByDate_Result> SP_GetInvestorsBalanceByDate(Nullable<System.DateTime> date, Nullable<bool> hasBalance, string verfication)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var hasBalanceParameter = hasBalance.HasValue ?
                new ObjectParameter("hasBalance", hasBalance) :
                new ObjectParameter("hasBalance", typeof(bool));
    
            var verficationParameter = verfication != null ?
                new ObjectParameter("verfication", verfication) :
                new ObjectParameter("verfication", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetInvestorsBalanceByDate_Result>("SP_GetInvestorsBalanceByDate", dateParameter, hasBalanceParameter, verficationParameter);
        }
    
        public virtual ObjectResult<SP_GetLatestFundingNotes_Result> SP_GetLatestFundingNotes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetLatestFundingNotes_Result>("SP_GetLatestFundingNotes");
        }
    
        public virtual ObjectResult<Nullable<long>> SP_GetLatestLoanReference()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_GetLatestLoanReference");
        }
    
        public virtual ObjectResult<SP_GetLeastInvestByInvestors_Result> SP_GetLeastInvestByInvestors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetLeastInvestByInvestors_Result>("SP_GetLeastInvestByInvestors");
        }
    
        public virtual ObjectResult<SP_GetOfferAndWithdrawalList_Result> SP_GetOfferAndWithdrawalList(Nullable<long> loanRequestId)
        {
            var loanRequestIdParameter = loanRequestId.HasValue ?
                new ObjectParameter("loanRequestId", loanRequestId) :
                new ObjectParameter("loanRequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetOfferAndWithdrawalList_Result>("SP_GetOfferAndWithdrawalList", loanRequestIdParameter);
        }
    
        public virtual int SP_GetOfferSmathList(Nullable<long> loanRequestId)
        {
            var loanRequestIdParameter = loanRequestId.HasValue ?
                new ObjectParameter("loanRequestId", loanRequestId) :
                new ObjectParameter("loanRequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetOfferSmathList", loanRequestIdParameter);
        }
    
        public virtual ObjectResult<SP_GetQualifiedTotalSignUp_Result> SP_GetQualifiedTotalSignUp(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetQualifiedTotalSignUp_Result>("SP_GetQualifiedTotalSignUp", yearParameter);
        }
    
        public virtual ObjectResult<SP_GetSignUpSource_Result> SP_GetSignUpSource()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSignUpSource_Result>("SP_GetSignUpSource");
        }
    
        public virtual ObjectResult<SP_GetSignupUsers_Result> SP_GetSignupUsers(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSignupUsers_Result>("SP_GetSignupUsers", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<SP_GetTotalSignUp_Result> SP_GetTotalSignUp(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetTotalSignUp_Result>("SP_GetTotalSignUp", yearParameter);
        }
    
        public virtual ObjectResult<SP_InvestorActiveDataBase_Result> SP_InvestorActiveDataBase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InvestorActiveDataBase_Result>("SP_InvestorActiveDataBase");
        }
    
        public virtual ObjectResult<SP_InvestorRepaymentReport_Result> SP_InvestorRepaymentReport(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> productId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InvestorRepaymentReport_Result>("SP_InvestorRepaymentReport", userIdParameter, fromDateParameter, toDateParameter, productIdParameter);
        }
    
        public virtual ObjectResult<SP_InvestorRepaymentReportView_Result> SP_InvestorRepaymentReportView(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> productId, Nullable<int> pageNum, Nullable<int> pageSize)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var pageNumParameter = pageNum.HasValue ?
                new ObjectParameter("pageNum", pageNum) :
                new ObjectParameter("pageNum", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InvestorRepaymentReportView_Result>("SP_InvestorRepaymentReportView", userIdParameter, fromDateParameter, toDateParameter, productIdParameter, pageNumParameter, pageSizeParameter);
        }
    
        public virtual int SP_ManageUserOTP(Nullable<long> userId, string mobileNo, string callingCode, string oTP, ObjectParameter latestOTP, ObjectParameter canSendSMS)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var callingCodeParameter = callingCode != null ?
                new ObjectParameter("CallingCode", callingCode) :
                new ObjectParameter("CallingCode", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ManageUserOTP", userIdParameter, mobileNoParameter, callingCodeParameter, oTPParameter, latestOTP, canSendSMS);
        }
    
        public virtual int SP_ManualCreditToUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ManualCreditToUser");
        }
    
        public virtual ObjectResult<string> SP_NewCampaign(string campaignName, Nullable<int> period, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var campaignNameParameter = campaignName != null ?
                new ObjectParameter("CampaignName", campaignName) :
                new ObjectParameter("CampaignName", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_NewCampaign", campaignNameParameter, periodParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_OutstandingInvestorAmount_Result> SP_OutstandingInvestorAmount(Nullable<long> investorid)
        {
            var investoridParameter = investorid.HasValue ?
                new ObjectParameter("investorid", investorid) :
                new ObjectParameter("investorid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_OutstandingInvestorAmount_Result>("SP_OutstandingInvestorAmount", investoridParameter);
        }
    
        public virtual int SP_RegisterUserOTP(string email, string mobileNo, string callingCode, string oTP, ObjectParameter latestOTP, ObjectParameter canSendSMS)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var callingCodeParameter = callingCode != null ?
                new ObjectParameter("CallingCode", callingCode) :
                new ObjectParameter("CallingCode", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RegisterUserOTP", emailParameter, mobileNoParameter, callingCodeParameter, oTPParameter, latestOTP, canSendSMS);
        }
    
        public virtual int SP_SetReconSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SetReconSummary");
        }
    
        public virtual int sp_Upsert_API_Scorto_ApplicationInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Upsert_API_Scorto_ApplicationInfo");
        }
    
        public virtual int sp_Upsert_API_Scorto_CreditInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Upsert_API_Scorto_CreditInfo");
        }
    
        public virtual int sp_Upsert_API_Scorto_IssuerInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Upsert_API_Scorto_IssuerInfo");
        }
    
        public virtual int SP_VerifyOTP(Nullable<long> userId, string mobileNumber, string callingCode, string enteredOTP, ObjectParameter unsuccessfulAttempt, ObjectParameter isExpired, ObjectParameter isLockedNow, ObjectParameter isNewMobileUpdated)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var callingCodeParameter = callingCode != null ?
                new ObjectParameter("CallingCode", callingCode) :
                new ObjectParameter("CallingCode", typeof(string));
    
            var enteredOTPParameter = enteredOTP != null ?
                new ObjectParameter("EnteredOTP", enteredOTP) :
                new ObjectParameter("EnteredOTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VerifyOTP", userIdParameter, mobileNumberParameter, callingCodeParameter, enteredOTPParameter, unsuccessfulAttempt, isExpired, isLockedNow, isNewMobileUpdated);
        }
    
        public virtual int SP_VerifyRegisterUserOTP(string email, string mobileNumber, string callingCode, string enteredOTP, ObjectParameter unsuccessfulAttempt, ObjectParameter isExpired, ObjectParameter isLockedNow)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var callingCodeParameter = callingCode != null ?
                new ObjectParameter("CallingCode", callingCode) :
                new ObjectParameter("CallingCode", typeof(string));
    
            var enteredOTPParameter = enteredOTP != null ?
                new ObjectParameter("EnteredOTP", enteredOTP) :
                new ObjectParameter("EnteredOTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VerifyRegisterUserOTP", emailParameter, mobileNumberParameter, callingCodeParameter, enteredOTPParameter, unsuccessfulAttempt, isExpired, isLockedNow);
        }
    
        public virtual int USP_tbl_Knowledgeassessment_ForUser_Savedetails(string xmlText, Nullable<long> userid)
        {
            var xmlTextParameter = xmlText != null ?
                new ObjectParameter("XmlText", xmlText) :
                new ObjectParameter("XmlText", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_tbl_Knowledgeassessment_ForUser_Savedetails", xmlTextParameter, useridParameter);
        }
    
        public virtual int USP_tbl_LoanRequest_SaveLoanrequestdetails(Nullable<decimal> amount, string tenure, Nullable<decimal> rate, Nullable<bool> ispersonalguarantee, Nullable<long> loanpurposeID, string loanPurposeDescription, Nullable<long> user_Id, ObjectParameter requestID, Nullable<int> requestIDold, string videoDiscription, Nullable<decimal> eIR, string detailedCompanyPro, string summaryCompanyPro, Nullable<int> numberOfEmployees, string headline, Nullable<int> campaignPeriod)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var tenureParameter = tenure != null ?
                new ObjectParameter("Tenure", tenure) :
                new ObjectParameter("Tenure", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var ispersonalguaranteeParameter = ispersonalguarantee.HasValue ?
                new ObjectParameter("Ispersonalguarantee", ispersonalguarantee) :
                new ObjectParameter("Ispersonalguarantee", typeof(bool));
    
            var loanpurposeIDParameter = loanpurposeID.HasValue ?
                new ObjectParameter("LoanpurposeID", loanpurposeID) :
                new ObjectParameter("LoanpurposeID", typeof(long));
    
            var loanPurposeDescriptionParameter = loanPurposeDescription != null ?
                new ObjectParameter("LoanPurposeDescription", loanPurposeDescription) :
                new ObjectParameter("LoanPurposeDescription", typeof(string));
    
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(long));
    
            var requestIDoldParameter = requestIDold.HasValue ?
                new ObjectParameter("requestIDold", requestIDold) :
                new ObjectParameter("requestIDold", typeof(int));
    
            var videoDiscriptionParameter = videoDiscription != null ?
                new ObjectParameter("VideoDiscription", videoDiscription) :
                new ObjectParameter("VideoDiscription", typeof(string));
    
            var eIRParameter = eIR.HasValue ?
                new ObjectParameter("EIR", eIR) :
                new ObjectParameter("EIR", typeof(decimal));
    
            var detailedCompanyProParameter = detailedCompanyPro != null ?
                new ObjectParameter("DetailedCompanyPro", detailedCompanyPro) :
                new ObjectParameter("DetailedCompanyPro", typeof(string));
    
            var summaryCompanyProParameter = summaryCompanyPro != null ?
                new ObjectParameter("SummaryCompanyPro", summaryCompanyPro) :
                new ObjectParameter("SummaryCompanyPro", typeof(string));
    
            var numberOfEmployeesParameter = numberOfEmployees.HasValue ?
                new ObjectParameter("NumberOfEmployees", numberOfEmployees) :
                new ObjectParameter("NumberOfEmployees", typeof(int));
    
            var headlineParameter = headline != null ?
                new ObjectParameter("Headline", headline) :
                new ObjectParameter("Headline", typeof(string));
    
            var campaignPeriodParameter = campaignPeriod.HasValue ?
                new ObjectParameter("CampaignPeriod", campaignPeriod) :
                new ObjectParameter("CampaignPeriod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_tbl_LoanRequest_SaveLoanrequestdetails", amountParameter, tenureParameter, rateParameter, ispersonalguaranteeParameter, loanpurposeIDParameter, loanPurposeDescriptionParameter, user_IdParameter, requestID, requestIDoldParameter, videoDiscriptionParameter, eIRParameter, detailedCompanyProParameter, summaryCompanyProParameter, numberOfEmployeesParameter, headlineParameter, campaignPeriodParameter);
        }
    
        public virtual int USP_tbl_PersonalGuaranteeInfo_Delete(Nullable<int> inforid, Nullable<long> requestid)
        {
            var inforidParameter = inforid.HasValue ?
                new ObjectParameter("inforid", inforid) :
                new ObjectParameter("inforid", typeof(int));
    
            var requestidParameter = requestid.HasValue ?
                new ObjectParameter("requestid", requestid) :
                new ObjectParameter("requestid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_tbl_PersonalGuaranteeInfo_Delete", inforidParameter, requestidParameter);
        }
    
        public virtual int USP_tbl_PersonalGuaranteeInfo_Save(Nullable<int> inforid, Nullable<long> requestid, string nameasinNRICPassport, string designation, string nRICPassport, string reasons, string residentialaddress, string telephone, string email, string postalcode, string passportNumber, string nationality)
        {
            var inforidParameter = inforid.HasValue ?
                new ObjectParameter("inforid", inforid) :
                new ObjectParameter("inforid", typeof(int));
    
            var requestidParameter = requestid.HasValue ?
                new ObjectParameter("requestid", requestid) :
                new ObjectParameter("requestid", typeof(long));
    
            var nameasinNRICPassportParameter = nameasinNRICPassport != null ?
                new ObjectParameter("NameasinNRICPassport", nameasinNRICPassport) :
                new ObjectParameter("NameasinNRICPassport", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var nRICPassportParameter = nRICPassport != null ?
                new ObjectParameter("NRICPassport", nRICPassport) :
                new ObjectParameter("NRICPassport", typeof(string));
    
            var reasonsParameter = reasons != null ?
                new ObjectParameter("Reasons", reasons) :
                new ObjectParameter("Reasons", typeof(string));
    
            var residentialaddressParameter = residentialaddress != null ?
                new ObjectParameter("Residentialaddress", residentialaddress) :
                new ObjectParameter("Residentialaddress", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var postalcodeParameter = postalcode != null ?
                new ObjectParameter("Postalcode", postalcode) :
                new ObjectParameter("Postalcode", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_tbl_PersonalGuaranteeInfo_Save", inforidParameter, requestidParameter, nameasinNRICPassportParameter, designationParameter, nRICPassportParameter, reasonsParameter, residentialaddressParameter, telephoneParameter, emailParameter, postalcodeParameter, passportNumberParameter, nationalityParameter);
        }
    }
}
